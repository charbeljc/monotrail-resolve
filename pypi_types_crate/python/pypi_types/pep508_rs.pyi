# stubgen -p pep508_rs

from typing import Any, ClassVar

class MarkerEnvironment:
    implementation_name: Any
    implementation_version: Any
    os_name: Any
    platform_machine: Any
    platform_python_implementation: Any
    platform_release: Any
    platform_system: Any
    platform_version: Any
    python_full_version: Any
    python_version: Any
    sys_platform: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def current(self, *args, **kwargs) -> Any: ...

class Pep508Error(ValueError): ...

class Requirement:
    extras: Any
    name: Any
    version_or_url: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def evaluate_extras_and_python_version(self, *args, **kwargs) -> Any: ...
    def evaluate_markers(self, *args, **kwargs) -> Any: ...
    def evaluate_markers_and_report(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Version:
    dev: Any
    epoch: Any
    post: Any
    pre: Any
    release: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def any_prerelease(self, *args, **kwargs) -> Any: ...
    def is_dev(self, *args, **kwargs) -> Any: ...
    def is_local(self, *args, **kwargs) -> Any: ...
    def is_post(self, *args, **kwargs) -> Any: ...
    def is_pre(self, *args, **kwargs) -> Any: ...
    def parse_star(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VersionSpecifier:
    __hash__: ClassVar[None] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def contains(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
